// Now that you have a bit hands on with core, lets start looking to String.class, before jumping on to collections.
// I want you both to understand below concepts

// Explain the basic concept of strings in Java. -done
// how strings are immutable and what immutability means. ( for this you need to understand memory in java, heap vs stack ) - done
// various ways to create strings. - done
// Show examples of string concatenation and the + operator. -done
// common methods provided by the String class (e.g., length(), charAt(), substring(), indexOf()). - done
// the immutability of strings and the importance of understanding how methods return new strings. -done
// the StringBuffer class and its purpose - done
// common methods provided by StringBuffer (e.g., append(), insert(), delete(), reverse()). - done
// the mutability of StringBuffer with the immutability of String - done
// the StringBuilder class as an alternative to StringBuffer - done
// common methods provided by StringBuilder (similar to StringBuffer) - done
// Compare the performance of StringBuilder with StringBuffer - done

//package com.mycompany.backend_java;

// import java.sql.Time;
// import java.util.*;
//public class Strings {
    //STRINGS:
// package com.mycompany.backend_java;
// import java.util.*;

    //public static void main(String[] args){
        //string declaration
        // String name= "Tony";
        // String fullName ="Tony Stark";
        // String Sentence= "My name is Tony Stark";
        // System.out.println(name +" "+ fullName + " "+ Sentence);

        // to take input
        // Scanner sc= new Scanner(System.in);
        // String name= sc.nextLine();
        // System.out.println("Your name is: "+name);

        // **how strings are immutable and what immutability means. ( for this you need to understand memory in java, heap vs stack ) - done
        // String s="Sachin";  
        // s.concat(" Tendulkar");//concat() method appends the string at the end  
        // System.out.println(s);//will print Sachin because strings are immutable objects

        //But if we explicitly assign it to the reference variable, it will refer to "Sachin Tendulkar" object.
        //For example:
        //   String s="Sachin";  
        //    s=s.concat(" Tendulkar");  
        //    System.out.println(s);   //o/p will be Sachin Tendulkar

        //Various ways to create a string
        //1.
        //char[] ch={'j','a','v','a','t','p','o','i','n','t'};  
        // String s=new String(ch);  

        //2.String literal
        //String s= "javatpoint";

        //3. using new keyword
        //String s=new String("Welcome");//creates two objects and one reference variable  


        //Concatination:
        // String firstName= "Tony";
        // String lastName ="Stark";
        // String fullName = firstName+ " " + lastName;
        // System.out.println(fullName);

        //length of string
        // String firstName= "Tony";
        // String lastName ="Stark";
        // String fullName = firstName+ " " + lastName;
        // System.out.println(fullName.length());

        //print all the elements
    //     String firstName= "Tony";
    //     String lastName ="Stark";
    //     String fullName = firstName+ " " + lastName;
    //     System.out.println(fullName.length());
    //     for(int i=0; i<fullName.length(); i++){
    //         System.out.println(fullName.charAt(i));
    //     }

    //     String s1="this is index of example";  
    // //passing substring  
    // int index1=s1.indexOf("is");//returns the index of "is" substring  
    // int index2=s1.indexOf("index");//returns the index of "index" substring  
    // System.out.println(index1+"  "+index2);//2 8  
    //     }
    // }

        //Compare two strings
        // String name1 = "Sahiti";
        // String name2 = "Sahiti";

        //s1>s2 then +ve value
        //s1==s2 then 0
        //s1< s2 then -ve value

        //hello wello , hello is small and wello is larger

        // if(name1.compareTo(name2)==0){
        //     System.out.println("Strings are equal");
        // }else{
        //     System.out.println("Strings are not equal");
        // }

        //substring:
        // String sentence= "My name is Sahiti";
        // substring(bed index, end index);

        // String name= sentence.substring(11, sentence.length());
        // System.out.println(name);

        //String name= sentence.substring(5); //it by default takes the last element place as end index

        //strings are immutable
//     }
// }


//String builder : for modifying a string
// package com.mycompany.backend_java;
// import java.util.*;

// public class Backend_Java{
//     public static void main(String[] args){
//         StringBuilder sb= new StringBuilder("Sahiti");
//         System.out.println(sb);

        // //char at index 0:
        // System.out.println(sb.charAt(0));

        // //set char at index:
        // sb.setCharAt(0, 'T');
        // System.out.println(sb);

        //insert a element in a string
        // sb.insert(0, 'D');
        // System.out.println(sb);

        //delete something
        // sb.delete(0, 2);
        // System.out.println(sb);

        //append -> add something at the end
        // sb.append('D'); //if using strings then str= str+"D"
        // sb.append('w');
        // sb.append('i');
        // sb.append('v');
        // sb.append('i');
        // sb.append('d');
        // System.out.println(sb);

        //length
        // System.out.println(sb.length());
//     }
// }


//Reversing a string:
// package com.mycompany.backend_java;
// import java.util.*;

// public class Backend_Java{
//     public static void main(String[] args){
//         StringBuilder sb= new StringBuilder("Sahiti");

//         for(int i=0;i<sb.length()/2;i++){ //here we calculated what the front and back indexes are
//             int front =i;
//             int back = sb.length()-1-i; //here it means h is going to the position 5(length)-1-0(its position in string)=4 i.e, 4th index

//             char frontChar = sb.charAt(front); //here we discovered what the front char is and which is the back char and assigned it to some variables like frontChar ad backChar
//             char backChar= sb.charAt(back);

//             sb.setCharAt(front, backChar); //here we replaced the front index character with backchar
//             sb.setCharAt(back, frontChar);
//         }

//         System.out.println(sb);
//     }
// }


//the StringBuilder class as an alternative to StringBuffer - done
// StringBuilder sb= new StringBuilder("Hello");
// sb.append(" Sahiti");
// System.out.println(sb);

// sb.insert(5," Dwivedula");
// System.out.println(sb);

// sb.replace(1,3,"ueyrbufdh");
// System.out.println(sb);

// sb.delete(1,3);  
// System.out.println(sb);

// sb.reverse();  
// System.out.println(sb);//prints olleH 


//Comparing the StringBuffer and StringBuilder

// long startTime = System.currentTimeMillis();  //to calculate the time being taken

// StringBuffer sb = new StringBuffer("Sahiti");  
// for (int i=0; i<10000; i++){  
//     sb.append("Dwivedula");  
// }  
// System.out.println("Time taken by StringBuffer: " + (System.currentTimeMillis() - startTime) + "ms");  

// startTime = System.currentTimeMillis();  
// StringBuilder sb2 = new StringBuilder("Sahiti");  
// for (int i=0; i<10000; i++){  
//     sb2.append("Dwivedula");  
// }  
// System.out.println("Time taken by StringBuilder: " + (System.currentTimeMillis() - startTime) + "ms"); 

//output:
//Time taken by StringBuffer: 3ms
//Time taken by StringBuilder: 0ms

// // immutable class:
// public final class Strings {
// final String pancardNo;

// public Strings(String pancardNo)
// {
//     this.pancardNo = pancardNo;
// }
// public String getPancardNumber(){    
//     return pancardNo;    
// }    

//new file:
// public class immutable{
//     public static void main(String[] args) {
// Strings e = new Strings("ABC123");  
// String s1 = e.getPancardNumber();  
// System.out.println("Pancard Number: " + s1);  
//    }
// }
// }
